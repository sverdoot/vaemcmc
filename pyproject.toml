[tool.poetry]
name = "vaemcmc"
version = "0.1.0"
description = ""
authors = ["Evgeny Lagutin <lagutin.em@phystech.edu>"]
license = "MIT"
readme = "README.md"
maintainers = [
   "Evgeny Lagutin <lagutin.em@phystech.edu>"
]
repository = "http://github.com/sverdoot/vaemcmc.git"
documentation = "http://github.com/sverdoot/vaemcmc/blob/master/README.md"
keywords = ["mcmc", "adaptive mcmc", "vae", "sampling", "normalizing flow", "variational inference"]


[tool.poetry.dependencies]
python = ">=3.9,<3.12"
torch = "*"
numpy = "*"
torchvision = "*"
matplotlib = "*"
tqdm = "*"
seaborn = "*"
scipy = "*"
pyro-ppl = "*"

# [[tool.poetry.source]]
#     name = "torch"
#     url = "https://download.pytorch.org/whl/cu116"
#     # priority = "explicit"
munch = "*"
ruamel-yaml = "*"
typing-extensions = "*"
torch-mimicry = {git = "https://github.com/kwotsin/mimicry.git", rev = "a7fda06c4aff1e6af8dc4c4a35ed6636e434c766"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
# tensorflow = {version = "~2.11.1", python = "~3.8"}
black = {extras = ["jupyter"], version = "^23.3.0"}
isort = "^5.12.0"
flake8 = "5.0.4"
pre-commit = "*"
# docker = "^6.0.1"
jupyter = "*"
ipykernel = "*"
ipython = "*"
# pytest = "*"

[tool.black]
target-version = ["py39"]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | thirdparty
)/
'''

[tool.isort]
src_paths = ["."]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
lines_after_imports = 2
skip_glob = 'thirdparty'
known_third_party = ["PIL", "gdown", "imageio", "matplotlib", "numpy", "ruamel", "scipy", "seaborn", 
    "skimage", "sklearn", "tensorflow", "torch", "torchvision",  "torch_mimicry"
    ]

[tool.flake8]
min_python_version = "3.8.0"
max-line-length = 88
# ban-relative-imports = true
# flake8-use-fstring: https://github.com/MichaelKim0407/flake8-use-fstring#--percent-greedy-and---format-greedy
format-greedy = 1
inline-quotes = "double"
# Allow omission of a return type hint for __init__ if at least one argument is annotated
# used by flake8-annotations
mypy-init-return = true
#enable-extensions = TC, TC2
#type-checking-exempt-modules = typing, typing-extensions
eradicate-whitelist-extend = "^-.*;"
extend-ignore = """
    # E203: Whitespace before ':' (pycqa/pycodestyle#373)
    E203,
    # SIM106: Handle error-cases first
    SIM106,
    # ANN101: Missing type annotation for self in method
    ANN101,
    # ANN102: Missing type annotation for cls in classmethod
    ANN102,
    # E402: module level import not at top of file
    E402,
    """
per-file-ignores = """
    # F401: Module imported by unused (non-implicit modules)
    # TC002: Move third-party import '...' into a type-checking block
    __init__.py:F401,TC002,
    # ANN201: Missing return type annotation for public function
    tests/test_*:ANN201
    tests/**/test_*:ANN201
    """
extend-exclude = """
    # Frozen and not subject to change in this repo:
    thirdparty/*,
    # # External to the project's coding standards:
    """
